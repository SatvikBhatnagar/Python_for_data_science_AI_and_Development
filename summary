types:
	float
	int
	str
	typecasting -- float(2):- 2.0
			int(1.1):- 1
			int('1'):- 1
			int('A'):- error
	boolean:
		True
		False
		type(True):- bool
		bool(1):- True
		bool(0):- False
		int(True):- 1
		int(False):- 0
		float(True):- 1.0
		float(False):- 0.0

---------------------------------------------------------------------------
Expressions:
	-Expresssions describe a type of operation the computers perform
	
	-Operators in Python:
				Addition:- +
				Subtraction:- -
				Multiplication:- *
				Division:- / (forward slash)
				Integer Division:- // (double forward slash)
					25//5 = 5, 25//6 = 4, 25/6 = 4.166..

	-Python follows mathematical conventions when performing mathematical expressions

---------------------------------------------------------------------------
Variables:
	-we can use variable to store values
	-it's a good practice to use meaningful variable names

---------------------------------------------------------------------------
Error codes:
	-NameError
	-SyntaxError

---------------------------------------------------------------------------
Python Random Bits:
	-PYTHON VERSION
	 [
	  import sys
	  print(sys.version)
	]
	-python is an INTERPRETED language, i.e., it interprets the script 
	 line by line while executing it
	-SYSTEM SETTINGS ABOUT FLOAT TYPE
	 [
	  sys.float_info
	 ]

---------------------------------------------------------------------------
STRINGS: Slicing
	Name = "Ram Chandra"
	-Indexing starts with 0
	Name[0:4] = Ram ----- TIP: the first number means the INDEX and the
				last number means the LENGTH from the index 
	Name[-1] = a
	len(Name) = 11
	
	-Immutable
	-Escape Secquences:
		"\" are meant to proceed escape sequences
		\n :- for new line
		\t :- for tab
		\\ :- for blackslash 

--strings are sequences, so have methods that work on lists and tuples
  (sequence methods)
--strings also have its own methods (string methods)

STRINGS: Methods
	REPLACE
	a = 'something is true'
	b = a.replace('something', 'nothing')
	b:- 'nothing is true'
	
	UPPER
	FIND - a.find('nothing') -- output is the first index of the 
		first occuring, if doesn't exist, -1

----------------------------------------------------------------------------
RegEx (Regular Expressions) -- a tool for matching and handling strings

	search() -- search function searches for specified patterns within
		a string
	findall() -- finds all occurrencese of a specified pattern within
		a string
	split() -- splits a string into an array of substrings based on
		a specified pattern
	sub() -- the sub function of a regular expression in Python is used
		to replace all occurrences of a pattern in a string with a
		specified replacement
		-- re.sub(pattern, replacement, string)

	import re
	\d - matches any digit character 
			"123" matches "\d\d\d"
	\D - matches any non-digit character
			"hello" matches "\D\D\D\D\D"
	\w - any word character (a-z, A-Z, 0-9, and _)
			"hello_world" matches "\w\w\w\w\w\w\w\w\w"
	\W - any non-word character
			"@#$%" matches \W\W\W\W"
	\s - any whitespace character (space, tab, newline, etc.) 
			"hello world" matches "\w\s\w\w\w\w\w"
	\S - any non-whitespace character 
			"hello_world" matches "\S\S\S\S\S\S\S\S\S"
	\b - matches the boundary between a word character and a non-word
			character
			"cat" matches "\bcat\b" in "The cat sat on the mat"
	\B - matches any position that is not a word boundary
			"cat" matches "\Bcat\B" in "category" but not in 
			"The cat sat on the mat"

----------------------------------------------------------------------------
TUPLES
	-an ORDERED sequence
	-are IMMUTABLE
	-a tuple can contain other tuples as well as other complex 
	 data types
	
	SORTING -- sort the values in a tuple
		Ratings = (0,9,6)
		RatingsSorted = sorted(Ratings)
	tupleName.index("") -- for the index

----------------------------------------------------------------------------

LISTS
	-an ORDERED sequence
	-are mutable
	L.extend(a) -- add the list 'a' to the list L
	L.append(b) -- add one element b (could be a complex object) 
			to list L
	del(L[0]) -- deletes the first element of the list L
	
	Convert string to list --
			"hard rock".split()
			["hard", "rock"]
			--split() method needs a delimiter, if none
			  is provided, it splits using spaces

	ALIASING -- multiple names referring to the same object is known
		as ALIASING
			A=[1,2,3]
			B=A
			-here both refers to the same list, no new list
			 B has been created here
			-since both refers to the same list, if we change
			 one of the elements of the list using either A or
			 B, printing both the lists will result in the same
			 list because both are referencing to the same list
	Cloning -- new copy of the list
			 B=A[:]

----------------------------------------------------------------------------
DICTIONARIES

	-the keys have to be IMMUTABLE and UNIQUE
	-the values can be immutable, mutable and duplicates
	-the keys can be strings, tuple

	-for every key, there can only be ONE SINGLE VALUE
	-multiple keys can hold the same value
	-values can be any data type

	dict = {1:"hello", 2:"bye"}
	dict[1] --> "hello"
	dict[3] = "hi" -- adds the key value pair to the dictionary
	del(dict[3]) -- deletes the key '3' and its value
	"2" in dict -- returns True
	"3" in dict -- returns False
	dict.keys() -- returns all the keys in the dictionary
	dict.values() -- returns all the values in the dictionary

----------------------------------------------------------------------------
SETS

	-UNORDERED
	-have only UNIQUE elements        
	-if duplicate items are entered into a set, they are removed
	 automatically
	-TYPE CASTING - convert list into a set by using set()
	
	Set Operations
		A = {}
		A.add() -- to add an element to the set
		A.remove() -- to remove an element from the set
		"something" in A -- returns True if the item is in the set
		 	 	    False otherwise

		INTERSECTION
			set_A & set_B -- gives the intersection of set_A 
					and set_B
		UNION
			set_A.union(set_B) -- gives the union of the sets
		SUBSET
			set_B.issubset(set_A) -- to check if set_B is a
						subset of set_A
		SUPERSET
			set_A.issuperset(set_B)
		DIFFERENCE
			-find all the elements that are only contained in
			 set_A
				set_A.difference(set_B)

----------------------------------------------------------------------------
